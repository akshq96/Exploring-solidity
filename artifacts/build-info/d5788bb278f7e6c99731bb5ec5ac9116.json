{
	"id": "d5788bb278f7e6c99731bb5ec5ac9116",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.30",
	"solcLongVersion": "0.8.30+commit.73712a01",
	"input": {
		"language": "Solidity",
		"sources": {
			"CheatCodes/making Own Cryptocurrency on Eth.sol": {
				"content": "// created a new contract file, I named mine LW3Token.sol\n\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\n// import \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\";\n\n// contract LW3Token is ERC20 {\n//     constructor(string memory _name, string memory _symbol) ERC20(_name, _symbol) {\n//         _mint(msg.sender, 10 * 10 ** 18);\n//     }\n// }\n\n// This code is also written in LW3Token.sol file."
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			},
			"remappings": []
		}
	},
	"output": {
		"sources": {
			"CheatCodes/making Own Cryptocurrency on Eth.sol": {
				"ast": {
					"absolutePath": "CheatCodes/making Own Cryptocurrency on Eth.sol",
					"exportedSymbols": {},
					"id": 2,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".19"
							],
							"nodeType": "PragmaDirective",
							"src": "91:24:0"
						}
					],
					"src": "91:368:0"
				},
				"id": 0
			}
		}
	}
}