1.Remapping kya hota hai?
Remapping ek shortcut hota hai import ke liye.
Iska use hum tab karte hain jab hume koi badi ya confusing file path baar-baar likhni padti hai, usko short aur simple banaane ke liye.

2.
.env file kya hota hai?
.env file ek environment file hoti hai jismein aap apne secrets ya important settings store karte

3.
React components.
omposition 
React me hum chhote-chhote parts banate hain, jise components kehte hain. Ye components ek webpage ka chhota hissa dikhate hain. Ab hum ye chhote components ko andar doosre components ke andar rakh sakte hain, jisse bada component banta hai
Is process ko Composition kehte hain. Matlab, chhote functions (jo HTML dikhate hain) ko ek saath mila ke ek bada HTML banate hain.

4.
React ke Composition, Data Passing, aur Interactivity ke baare mein baat ki. Matlab, hum button click pe code chala sakte hain, data ek component se doosre component mein bhej sakte hain, aur chhote-chhote parts ko mila ke badi cheez bana sakte hain.
Lekin ab jab hum chahte hain ki kuch variables ko update kar ke UI bhi badle, tab problem aati hai.
Agar aap ek simple variable ko change karoge, jaise:

let count = 0;
function App() {
  function handleClick() {
    count = count + 1;  // variable update ho raha hai
    console.log(count);
  }
  return (
    <div>
      <p>Count: {count}</p>  {/* Ye screen pe dikhega */}
      <button onClick={handleClick}>Increment</button>
    </div>
  );
}
Yahan pe jab button dabate ho:
count variable badal toh jaata hai,
Lekin screen pe value change nahi hoti!
Kyun? Kyunki React ko pata nahi chalta ki variable update hua hai, isliye wo page ko dobara render (refresh) nahi karta.

Solution kya hai?
React me state hoti hai — aisi special variables jise React track karta hai.
useState hook se aap state banate ho. Jab state update hoti hai, React automatic UI ko refresh karta hai.
Example:
import React, { useState } from 'react';
function App() {
  const [count, setCount] = useState(0);  // count ab state hai
  function handleClick() {
    setCount(count + 1);  // state update karo
  }
  return (
    <div>
      <p>Count: {count}</p>  {/* Ye ab update hota rahega */}
      <button onClick={handleClick}>Increment</button>
    </div>
  );
}
Ab jab button dabate ho:
setCount se state update hoti hai,
React ko pata chal jaata hai ki UI update karna hai,
Aur screen pe count badal ke dikhta hai.

Short me:
Simple variable change karna React me kaam nahi karta,
State use karo (useState),
State update karo, React UI ko automatically update karega

5.
Variables created using useState in React are called State Variables. State Variables can be updated and automatically update the view of the app. Here's another example of using State Variables with input boxes.
function StateWithInput() {
  // myName is the variable
  // setMyName is the updater function
  // Create a state variable with initial value
  // being an empty string ""
  const [myName, setMyName] = useState("");
  function handleOnChange(text) {
    setMyName(text);
  }
  return (
    <div>
      <input type="text" onChange={(e) => handleOnChange(e.target.value)} />
      <p>Hello, {myName}!</p>
    </div>
  );
}

6.
useEffect hook kya hai?
Socho React me jab tumhara page khulta hai, ya koi cheez badalti hai, toh tumhe kuch extra kaam karna hai — jaise data lana, timer lagana, ya console me message print karna.
useEffect wo special function hai jo tumhe ye extra kaam karne deta hai.

useEffect kaise kaam karta hai?
Tum usko do cheeze dete ho:
Ek function — jisme wo kaam likhoge jo tum karna chahte ho (jaise server se data lana).
Ek list (dependency array) — jisme tum bataoge ki kab tumhara function chalna chahiye.

7.
Why does Gas exist?
Gas fees help keep the Ethereum network secure. By requiring a fee for every computation executed on the network, bad actors are prevented from spamming the network.
In order to avoid accidental or malicious infinite loops in smart contracts, which would cause all Ethereum nodes to forever be stuck, gas limits on transactions set a limit to how much computation a transaction can use.
 // SPDX-License-Identifier: MIT
pragma solidity ^0.8.10;
contract Gas {
    uint public i = 0;
    // Using up all of the gas that you send causes your transaction to fail.
    // State changes are undone.
    // Gas spent are not refunded.
    function forever() public {
        // Here we run a loop until all of the gas are spent
        // and the transaction fails
        while (true) {
            i += 1;
        }
    }
}